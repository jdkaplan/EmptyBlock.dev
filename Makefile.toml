[config]
default_to_workspace = false
skip_core_tasks = true

[tasks.default]
alias = "help"

[tasks.help]
description = "Show descriptions for all tasks"
command = "cargo"
args = ["make", "--list-all-steps", "--loglevel=off"]

[tasks.dev]
description = "Start development services, run the app, watch for changes"
dependencies = ["services"]
run_task = { name = ["dev-web", "dev-server"], parallel = true, fork = true }

[tasks.dev-web]
description = "Start dev server for frontend and watch for changes"
command = "cargo"
cwd = "web"
args = [
    "bin", "trunk", "serve",
    "--port", "8000",
    "--proxy-backend", "http://localhost:8080/api",
    "./index.html",
]

[tasks.dev-server]
description = "Run backend server and watch for changes"
# TODO: Set port explicitly instead of relying on default 8080.
command = "cargo"
args = ["run", "--package", "server", "--", "./web/dist"]
watch = { watch = ["server"] }

[tasks.deps]
description = "Install dev tools and Cargo aliases"
run_task = { name = ["deps-install", "deps-sync"] }

[tasks.deps-install]
description = "Install dev tools"
command = "cargo"
args = ["bin", "--install"]

[tasks.deps-sync]
description = "Sync Cargo aliases from dev tools"
command = "cargo"
args = ["bin", "--sync-aliases"]

[tasks.services]
alias = "services-up"

[tasks.services-up]
description = "Start local development services"
command = "docker"
args = ["compose", "up", "--detach"]

[tasks.services-stop]
description = "Stop local development services"
command = "docker"
args = ["compose", "stop"]

[tasks.services-down]
description = "*DESTROY* local development services (this deletes data!)"
command = "docker"
args = ["compose", "down"]

[tasks.db]
alias = "db-sync"

[tasks.db-sync]
description = "db-migrate + orm"
run_task = { name = ["db-migrate", "orm"], parallel = false, fork = true }

[tasks.orm]
description = "Generate ORM definitions"
command = "cargo"
args = [
    "bin", "sea-orm-cli", "generate", "entity",
    "--ignore-tables", "schema_migrations",
    "--output-dir", "server/src/orm",
]

[tasks.db-migrate]
description = "Run local database migrations"
command = "cargo"
args = ["bin", "squill", "migrate"]

[tasks.db-wait]
description = "Wait for local database to be ready"
script = "until psql -c 'select 1' > /dev/null; do sleep 1; done"

[tasks.db-reset]
description = "*DELETE* and re-create the local dev database"
run_task = { name = ["services-down", "services-up", "db-wait", "db-migrate"] }

[tasks.deny]
description = "Run cargo-deny checks"
command = "cargo"
args = ["deny", "check"]

[tasks.licenses]
description = "Generate third-party license information"
command = "scripts/generate-third-party-licenses"
args = ["third_party_licenses.html"]
